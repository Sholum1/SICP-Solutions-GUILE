(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (display " > ")
      (display next)
      (newline)
      (if (close-enough? guess next)
	  next
	  (try next))))
  (try first-guess))

#|
  The base of the log is the euler number (e ~= 2.71828), so (log e) = 1.
  (fixed-point (lambda (x) (/ (log 1000) (log x))) 2.71828)  
   * Output:
    > 6.9077599255056255
    > 3.574248672572249
    > 5.423142848848506
    > 4.085796028270493
    > 4.9077612294397035
    > 4.342266567047013
    > 4.704284882542387
    > 4.461008904677125
    > 4.619413524706869
    > 4.5140827540990385
    > 4.583164850235612
    > 4.53744198314647
    > 4.567523399243504
    > 4.5476540879202005
    > 4.56074393393097
    > 4.552105522227964
    > 4.557799823660396
    > 4.554043421239284
    > 4.5565202125600575
    > 4.554886603607411
    > 4.555963846313773
    > 4.555253384881196
    > 4.555721903553597
    > 4.55541291667136
    > 4.5556166844660675
    > 4.555482301977737
    > 4.555570924099178
    > 4.555512479193301
    > 4.555551022400475
    > 4.5555256038234075
    > 4.555542366878409
    > 4.555531311946762
    > 4.5555386024636855

   * Number of steps: 33

  (fixed-point (lambda (x) (/ (+ x (/ (log 1000) (log x))) 2)) 2.71828)
   * Output:
    > 4.813019962752813
    > 4.604577354717796
    > 4.56408471277804
    > 4.556997373139955
    > 4.555784747035329
    > 4.555578112096927
    > 4.55554292551675
    > 4.555536934526627

   * Number of steps: 8
|#
